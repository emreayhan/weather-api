{"version":3,"sources":["store/actions/weatherActions.js","store/reducers/index.js","store/reducers/weatherReducer.js","axios/weatherApi.js","store/effects/getWeatherDataEffects.js","store/effects/index.js","store/store.js","components/city.jsx","components/details.jsx","App.js","serviceWorker.js","index.js"],"names":["REQUEST_DATA","RECEIVE_DATA","combineReducers","weatherResponse","state","arguments","length","undefined","_ref","type","response","axios","create","baseURL","getData","loadData","action","regenerator_default","a","wrap","_context","prev","next","fetchData","get","params","q","concat","payload","APPID","put","t0","console","log","stop","_marked","_context2","takeLatest","_marked2","rootSaga","all","fork","weatherSaga","effects_marked","sagaMiddleware","createSagaMiddleware","store","createStore","reducer","applyMiddleware","run","List","react_default","createElement","className","react_router_dom","to","exact","Component","Details","data","main","weather","wind","sys","this","props","requestWeather","then","res","_this2","setState","map","el","name","country","temp","pressure","humidity","speed","connect","dispatch","match","cityName","App","es","react_router","path","component","City","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6ad6a647.chunk.js","sourcesContent":["export const REQUEST_DATA = \"REQUEST_DATA\";\nexport const RECEIVE_DATA = \"RECEIVE_DATA\";\n\nexport const requestData = payload => ({ type: REQUEST_DATA, payload });\nexport const receiveData = receiveData => ({ type: RECEIVE_DATA, receiveData });\n","import { combineReducers } from \"redux\";\nimport weatherResponse from \"./weatherReducer\";\n\nexport default combineReducers({\n  weatherResponse,\n});\n","import { RECEIVE_DATA } from \"../actions/weatherActions\";\n\nexport default (state = {}, { type, response }) => {\n  switch (type) {\n    case RECEIVE_DATA:\n      return response;\n    default:\n      return state;\n  }\n};\n","import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"https://api.openweathermap.org/\"\n});\n","import { put, takeLatest } from \"redux-saga/effects\";\nimport { REQUEST_DATA, RECEIVE_DATA } from \"../actions/weatherActions\";\nimport fetchData from \"../../axios/weatherApi\";\n\nfunction* getData(action) {\n  try {\n    const response = fetchData.get(`data/2.5/weather?`, {\n      params: {\n        q: `${action.payload}`,\n        APPID: \"b712b9a9b0785a9842d7c7ba49f37a5f\"\n      }\n    });\n    yield put({ type: RECEIVE_DATA, response });\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport default function* loadData() {\n  yield takeLatest(REQUEST_DATA, getData);\n}\n","import { all, fork } from \"redux-saga/effects\";\n\nimport weatherSaga from \"./getWeatherDataEffects\";\n\n\nexport default function* rootSaga() {\n  yield all([fork(weatherSaga)]);\n}\n","import { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport reducer from \"./reducers\";\nimport rootSaga from \"./effects\";\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware();\n// mount it on the Store\nconst store = createStore(reducer, applyMiddleware(sagaMiddleware));\n\n// then run the saga\nsagaMiddleware.run(rootSaga);\n\n// render the application\nexport default store;\n","import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport \"./city.scss\";\nclass List extends Component {\n  render() {\n    return (\n      <div className=\"list\">\n        <h1>Weather of Cities</h1>\n        <li>\n          <NavLink className=\"navLink\" to=\"/istanbul\" exact>\n            Ä°stanbul\n          </NavLink>\n        </li>\n        <li>\n          <NavLink className=\"navLink\" to=\"/london\" exact>\n            London\n          </NavLink>\n        </li>\n        <li>\n          <NavLink className=\"navLink\" to=\"/rome\" exact>\n            Roma\n          </NavLink>\n        </li>\n        <li>\n          <NavLink className=\"navLink\" to=\"/madrid\" exact>\n            Madrid\n          </NavLink>\n        </li>\n        <li>\n          <NavLink className=\"navLink\" to=\"/paris\" exact>\n            Paris\n          </NavLink>\n        </li>\n      </div>\n    );\n  }\n}\n\nexport default List;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { requestData } from \"../store/actions/weatherActions\";\n// import \"./details.scss\";\nclass Details extends Component {\n  state = {\n    data: {},\n    main: {},\n    weather: \"\",\n    wind: {},\n    sys: {}\n  };\n\n  async componentDidMount() {\n    await this.props.requestWeather();\n    console.log(this.props.response);\n    await this.props.response.then(res =>\n      this.setState({\n        data: res.data,\n        main: res.data.main,\n        sys: res.data.sys,\n        weather: res.data.weather.map(el => el.main),\n        wind: res.data.wind\n      })\n    );\n    console.log(this.state.weather);\n  }\n\n  render() {\n    return (\n      <div className=\"details\">\n        <h2>\n          {\" \"}\n          City : {this.state.data.name}, {this.state.sys.country}\n        </h2>\n        <div> Weather : {this.state.weather}</div>\n        <div> Temparature : {this.state.main.temp}</div>\n        <div> Pressure : {this.state.main.pressure}</div>\n        <div> Humidity : {this.state.main.humidity}</div>\n        <div> Wind Speed: {this.state.wind.speed}</div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({ response: state.weatherResponse });\n\nconst mapDispatchToProps = (dispatch, props) => {\n  return {\n    requestWeather: () => {\n      dispatch(requestData(props.match.params.cityName));\n    }\n  };\n};\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Details);\n","import React from \"react\";\nimport \"./App.css\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { NavLink } from \"react-router-dom\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store/store\";\nimport City from \"./components/city\";\nimport Details from \"./components/details\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <NavLink className=\"navLink\" to=\"/\" exact>\n          Home\n        </NavLink>\n        <Switch>\n          <Route exact path=\"/\" component={City} />\n          <Route path=\"/:cityName\" component={Details} />\n        </Switch>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render( <Router>\n<App />\n</Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}